// Code generated by mockery v2.46.2. DO NOT EDIT.

package mocks

import (
	pkg "github.com/be-heroes/ultron/pkg"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// ICacheService is an autogenerated mock type for the ICacheService type
type ICacheService struct {
	mock.Mock
}

// AddCacheItem provides a mock function with given fields: key, value, d
func (_m *ICacheService) AddCacheItem(key string, value interface{}, d time.Duration) error {
	ret := _m.Called(key, value, d)

	if len(ret) == 0 {
		panic("no return value specified for AddCacheItem")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, interface{}, time.Duration) error); ok {
		r0 = rf(key, value, d)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllComputeConfigurations provides a mock function with given fields:
func (_m *ICacheService) GetAllComputeConfigurations() ([]pkg.ComputeConfiguration, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllComputeConfigurations")
	}

	var r0 []pkg.ComputeConfiguration
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]pkg.ComputeConfiguration, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []pkg.ComputeConfiguration); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]pkg.ComputeConfiguration)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCacheItem provides a mock function with given fields: key
func (_m *ICacheService) GetCacheItem(key string) (interface{}, error) {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for GetCacheItem")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (interface{}, error)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(string) interface{}); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDurableComputeConfigurations provides a mock function with given fields:
func (_m *ICacheService) GetDurableComputeConfigurations() ([]pkg.ComputeConfiguration, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDurableComputeConfigurations")
	}

	var r0 []pkg.ComputeConfiguration
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]pkg.ComputeConfiguration, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []pkg.ComputeConfiguration); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]pkg.ComputeConfiguration)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEphemeralComputeConfigurations provides a mock function with given fields:
func (_m *ICacheService) GetEphemeralComputeConfigurations() ([]pkg.ComputeConfiguration, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetEphemeralComputeConfigurations")
	}

	var r0 []pkg.ComputeConfiguration
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]pkg.ComputeConfiguration, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []pkg.ComputeConfiguration); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]pkg.ComputeConfiguration)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWeightedInteruptionRates provides a mock function with given fields:
func (_m *ICacheService) GetWeightedInteruptionRates() ([]pkg.WeightedInteruptionRate, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetWeightedInteruptionRates")
	}

	var r0 []pkg.WeightedInteruptionRate
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]pkg.WeightedInteruptionRate, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []pkg.WeightedInteruptionRate); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]pkg.WeightedInteruptionRate)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWeightedLatencyRates provides a mock function with given fields:
func (_m *ICacheService) GetWeightedLatencyRates() ([]pkg.WeightedLatencyRate, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetWeightedLatencyRates")
	}

	var r0 []pkg.WeightedLatencyRate
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]pkg.WeightedLatencyRate, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []pkg.WeightedLatencyRate); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]pkg.WeightedLatencyRate)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWeightedNodes provides a mock function with given fields:
func (_m *ICacheService) GetWeightedNodes() ([]pkg.WeightedNode, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetWeightedNodes")
	}

	var r0 []pkg.WeightedNode
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]pkg.WeightedNode, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []pkg.WeightedNode); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]pkg.WeightedNode)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewICacheService creates a new instance of ICacheService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewICacheService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ICacheService {
	mock := &ICacheService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
