// Code generated by mockery v2.46.2. DO NOT EDIT.

package mocks

import (
	pkg "github.com/be-heroes/ultron/pkg"
	mock "github.com/stretchr/testify/mock"

	v1 "k8s.io/api/core/v1"
)

// IComputeService is an autogenerated mock type for the IComputeService type
type IComputeService struct {
	mock.Mock
}

// CalculateWeightedNodeMedianPrice provides a mock function with given fields: wNode
func (_m *IComputeService) CalculateWeightedNodeMedianPrice(wNode *pkg.WeightedNode) (float64, error) {
	ret := _m.Called(wNode)

	if len(ret) == 0 {
		panic("no return value specified for CalculateWeightedNodeMedianPrice")
	}

	var r0 float64
	var r1 error
	if rf, ok := ret.Get(0).(func(*pkg.WeightedNode) (float64, error)); ok {
		return rf(wNode)
	}
	if rf, ok := ret.Get(0).(func(*pkg.WeightedNode) float64); ok {
		r0 = rf(wNode)
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func(*pkg.WeightedNode) error); ok {
		r1 = rf(wNode)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ComputeConfigurationMatchesWeightedNodeRequirements provides a mock function with given fields: computeConfiguration, wNode
func (_m *IComputeService) ComputeConfigurationMatchesWeightedNodeRequirements(computeConfiguration *pkg.ComputeConfiguration, wNode *pkg.WeightedNode) bool {
	ret := _m.Called(computeConfiguration, wNode)

	if len(ret) == 0 {
		panic("no return value specified for ComputeConfigurationMatchesWeightedNodeRequirements")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(*pkg.ComputeConfiguration, *pkg.WeightedNode) bool); ok {
		r0 = rf(computeConfiguration, wNode)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ComputeConfigurationMatchesWeightedPodRequirements provides a mock function with given fields: computeConfiguration, wPod
func (_m *IComputeService) ComputeConfigurationMatchesWeightedPodRequirements(computeConfiguration *pkg.ComputeConfiguration, wPod *pkg.WeightedPod) bool {
	ret := _m.Called(computeConfiguration, wPod)

	if len(ret) == 0 {
		panic("no return value specified for ComputeConfigurationMatchesWeightedPodRequirements")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(*pkg.ComputeConfiguration, *pkg.WeightedPod) bool); ok {
		r0 = rf(computeConfiguration, wPod)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// GetInteruptionRateForWeightedNode provides a mock function with given fields: wNode
func (_m *IComputeService) GetInteruptionRateForWeightedNode(wNode *pkg.WeightedNode) (*pkg.WeightedInteruptionRate, error) {
	ret := _m.Called(wNode)

	if len(ret) == 0 {
		panic("no return value specified for GetInteruptionRateForWeightedNode")
	}

	var r0 *pkg.WeightedInteruptionRate
	var r1 error
	if rf, ok := ret.Get(0).(func(*pkg.WeightedNode) (*pkg.WeightedInteruptionRate, error)); ok {
		return rf(wNode)
	}
	if rf, ok := ret.Get(0).(func(*pkg.WeightedNode) *pkg.WeightedInteruptionRate); ok {
		r0 = rf(wNode)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pkg.WeightedInteruptionRate)
		}
	}

	if rf, ok := ret.Get(1).(func(*pkg.WeightedNode) error); ok {
		r1 = rf(wNode)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLatencyRateForWeightedNode provides a mock function with given fields: wNode
func (_m *IComputeService) GetLatencyRateForWeightedNode(wNode *pkg.WeightedNode) (*pkg.WeightedLatencyRate, error) {
	ret := _m.Called(wNode)

	if len(ret) == 0 {
		panic("no return value specified for GetLatencyRateForWeightedNode")
	}

	var r0 *pkg.WeightedLatencyRate
	var r1 error
	if rf, ok := ret.Get(0).(func(*pkg.WeightedNode) (*pkg.WeightedLatencyRate, error)); ok {
		return rf(wNode)
	}
	if rf, ok := ret.Get(0).(func(*pkg.WeightedNode) *pkg.WeightedLatencyRate); ok {
		r0 = rf(wNode)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pkg.WeightedLatencyRate)
		}
	}

	if rf, ok := ret.Get(1).(func(*pkg.WeightedNode) error); ok {
		r1 = rf(wNode)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MatchPodSpec provides a mock function with given fields: pod
func (_m *IComputeService) MatchPodSpec(pod *v1.Pod) (*pkg.WeightedNode, error) {
	ret := _m.Called(pod)

	if len(ret) == 0 {
		panic("no return value specified for MatchPodSpec")
	}

	var r0 *pkg.WeightedNode
	var r1 error
	if rf, ok := ret.Get(0).(func(*v1.Pod) (*pkg.WeightedNode, error)); ok {
		return rf(pod)
	}
	if rf, ok := ret.Get(0).(func(*v1.Pod) *pkg.WeightedNode); ok {
		r0 = rf(pod)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pkg.WeightedNode)
		}
	}

	if rf, ok := ret.Get(1).(func(*v1.Pod) error); ok {
		r1 = rf(pod)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MatchWeightedNodeToComputeConfiguration provides a mock function with given fields: wNode
func (_m *IComputeService) MatchWeightedNodeToComputeConfiguration(wNode *pkg.WeightedNode) (*pkg.ComputeConfiguration, error) {
	ret := _m.Called(wNode)

	if len(ret) == 0 {
		panic("no return value specified for MatchWeightedNodeToComputeConfiguration")
	}

	var r0 *pkg.ComputeConfiguration
	var r1 error
	if rf, ok := ret.Get(0).(func(*pkg.WeightedNode) (*pkg.ComputeConfiguration, error)); ok {
		return rf(wNode)
	}
	if rf, ok := ret.Get(0).(func(*pkg.WeightedNode) *pkg.ComputeConfiguration); ok {
		r0 = rf(wNode)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pkg.ComputeConfiguration)
		}
	}

	if rf, ok := ret.Get(1).(func(*pkg.WeightedNode) error); ok {
		r1 = rf(wNode)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MatchWeightedPodToComputeConfiguration provides a mock function with given fields: wPod
func (_m *IComputeService) MatchWeightedPodToComputeConfiguration(wPod *pkg.WeightedPod) (*pkg.ComputeConfiguration, error) {
	ret := _m.Called(wPod)

	if len(ret) == 0 {
		panic("no return value specified for MatchWeightedPodToComputeConfiguration")
	}

	var r0 *pkg.ComputeConfiguration
	var r1 error
	if rf, ok := ret.Get(0).(func(*pkg.WeightedPod) (*pkg.ComputeConfiguration, error)); ok {
		return rf(wPod)
	}
	if rf, ok := ret.Get(0).(func(*pkg.WeightedPod) *pkg.ComputeConfiguration); ok {
		r0 = rf(wPod)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pkg.ComputeConfiguration)
		}
	}

	if rf, ok := ret.Get(1).(func(*pkg.WeightedPod) error); ok {
		r1 = rf(wPod)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MatchWeightedPodToWeightedNode provides a mock function with given fields: wPod
func (_m *IComputeService) MatchWeightedPodToWeightedNode(wPod *pkg.WeightedPod) (*pkg.WeightedNode, error) {
	ret := _m.Called(wPod)

	if len(ret) == 0 {
		panic("no return value specified for MatchWeightedPodToWeightedNode")
	}

	var r0 *pkg.WeightedNode
	var r1 error
	if rf, ok := ret.Get(0).(func(*pkg.WeightedPod) (*pkg.WeightedNode, error)); ok {
		return rf(wPod)
	}
	if rf, ok := ret.Get(0).(func(*pkg.WeightedPod) *pkg.WeightedNode); ok {
		r0 = rf(wPod)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pkg.WeightedNode)
		}
	}

	if rf, ok := ret.Get(1).(func(*pkg.WeightedPod) error); ok {
		r1 = rf(wPod)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIComputeService creates a new instance of IComputeService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIComputeService(t interface {
	mock.TestingT
	Cleanup(func())
}) *IComputeService {
	mock := &IComputeService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
