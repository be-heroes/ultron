// Code generated by mockery v2.46.2. DO NOT EDIT.

package mocks

import (
	pkg "github.com/be-heroes/ultron/pkg"
	mock "github.com/stretchr/testify/mock"

	v1 "k8s.io/api/core/v1"
)

// IMapper is an autogenerated mock type for the IMapper type
type IMapper struct {
	mock.Mock
}

// MapNodeToWeightedNode provides a mock function with given fields: node
func (_m *IMapper) MapNodeToWeightedNode(node *v1.Node) (pkg.WeightedNode, error) {
	ret := _m.Called(node)

	if len(ret) == 0 {
		panic("no return value specified for MapNodeToWeightedNode")
	}

	var r0 pkg.WeightedNode
	var r1 error
	if rf, ok := ret.Get(0).(func(*v1.Node) (pkg.WeightedNode, error)); ok {
		return rf(node)
	}
	if rf, ok := ret.Get(0).(func(*v1.Node) pkg.WeightedNode); ok {
		r0 = rf(node)
	} else {
		r0 = ret.Get(0).(pkg.WeightedNode)
	}

	if rf, ok := ret.Get(1).(func(*v1.Node) error); ok {
		r1 = rf(node)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MapPodToWeightedPod provides a mock function with given fields: pod
func (_m *IMapper) MapPodToWeightedPod(pod *v1.Pod) (pkg.WeightedPod, error) {
	ret := _m.Called(pod)

	if len(ret) == 0 {
		panic("no return value specified for MapPodToWeightedPod")
	}

	var r0 pkg.WeightedPod
	var r1 error
	if rf, ok := ret.Get(0).(func(*v1.Pod) (pkg.WeightedPod, error)); ok {
		return rf(pod)
	}
	if rf, ok := ret.Get(0).(func(*v1.Pod) pkg.WeightedPod); ok {
		r0 = rf(pod)
	} else {
		r0 = ret.Get(0).(pkg.WeightedPod)
	}

	if rf, ok := ret.Get(1).(func(*v1.Pod) error); ok {
		r1 = rf(pod)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIMapper creates a new instance of IMapper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIMapper(t interface {
	mock.TestingT
	Cleanup(func())
}) *IMapper {
	mock := &IMapper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
