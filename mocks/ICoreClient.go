// Code generated by mockery v2.46.2. DO NOT EDIT.

package mocks

import (
	context "context"

	corev1 "k8s.io/api/core/v1"

	mock "github.com/stretchr/testify/mock"

	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// ICoreClient is an autogenerated mock type for the ICoreClient type
type ICoreClient struct {
	mock.Mock
}

// ListNamespaces provides a mock function with given fields: ctx, opts
func (_m *ICoreClient) ListNamespaces(ctx context.Context, opts v1.ListOptions) (*corev1.NamespaceList, error) {
	ret := _m.Called(ctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for ListNamespaces")
	}

	var r0 *corev1.NamespaceList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, v1.ListOptions) (*corev1.NamespaceList, error)); ok {
		return rf(ctx, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, v1.ListOptions) *corev1.NamespaceList); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*corev1.NamespaceList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, v1.ListOptions) error); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListNodes provides a mock function with given fields: ctx, opts
func (_m *ICoreClient) ListNodes(ctx context.Context, opts v1.ListOptions) (*corev1.NodeList, error) {
	ret := _m.Called(ctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for ListNodes")
	}

	var r0 *corev1.NodeList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, v1.ListOptions) (*corev1.NodeList, error)); ok {
		return rf(ctx, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, v1.ListOptions) *corev1.NodeList); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*corev1.NodeList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, v1.ListOptions) error); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPods provides a mock function with given fields: ctx, namespace, opts
func (_m *ICoreClient) ListPods(ctx context.Context, namespace string, opts v1.ListOptions) (*corev1.PodList, error) {
	ret := _m.Called(ctx, namespace, opts)

	if len(ret) == 0 {
		panic("no return value specified for ListPods")
	}

	var r0 *corev1.PodList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, v1.ListOptions) (*corev1.PodList, error)); ok {
		return rf(ctx, namespace, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, v1.ListOptions) *corev1.PodList); ok {
		r0 = rf(ctx, namespace, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*corev1.PodList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, v1.ListOptions) error); ok {
		r1 = rf(ctx, namespace, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewICoreClient creates a new instance of ICoreClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewICoreClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *ICoreClient {
	mock := &ICoreClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
