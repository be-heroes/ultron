// Code generated by mockery v2.46.2. DO NOT EDIT.

package mocks

import (
	context "context"

	pkg "github.com/be-heroes/ultron/pkg"
	mock "github.com/stretchr/testify/mock"

	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// IMetricsClient is an autogenerated mock type for the IMetricsClient type
type IMetricsClient struct {
	mock.Mock
}

// ListNodeMetrics provides a mock function with given fields: ctx, opts
func (_m *IMetricsClient) ListNodeMetrics(ctx context.Context, opts v1.ListOptions) (*pkg.MetricsNodeList, error) {
	ret := _m.Called(ctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for ListNodeMetrics")
	}

	var r0 *pkg.MetricsNodeList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, v1.ListOptions) (*pkg.MetricsNodeList, error)); ok {
		return rf(ctx, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, v1.ListOptions) *pkg.MetricsNodeList); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pkg.MetricsNodeList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, v1.ListOptions) error); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPodMetrics provides a mock function with given fields: ctx, namespace, opts
func (_m *IMetricsClient) ListPodMetrics(ctx context.Context, namespace string, opts v1.ListOptions) (*pkg.MetricsPodList, error) {
	ret := _m.Called(ctx, namespace, opts)

	if len(ret) == 0 {
		panic("no return value specified for ListPodMetrics")
	}

	var r0 *pkg.MetricsPodList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, v1.ListOptions) (*pkg.MetricsPodList, error)); ok {
		return rf(ctx, namespace, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, v1.ListOptions) *pkg.MetricsPodList); ok {
		r0 = rf(ctx, namespace, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pkg.MetricsPodList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, v1.ListOptions) error); ok {
		r1 = rf(ctx, namespace, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIMetricsClient creates a new instance of IMetricsClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIMetricsClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IMetricsClient {
	mock := &IMetricsClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
